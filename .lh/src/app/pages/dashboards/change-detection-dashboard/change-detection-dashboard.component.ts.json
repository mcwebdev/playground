{
    "sourceFile": "src/app/pages/dashboards/change-detection-dashboard/change-detection-dashboard.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1692210161120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692210797063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,10 @@\n     timestamp: new Date('2023-08-09 11:00:00'),\n   };\n \n   updateMessage() {\n-    this.message.text = 'Updated message';\n-    this.message.timestamp = new Date();\n+    this.message = {\n+      text: 'Updated message',\n+      timestamp: new Date(),\n+    };\n   }\n }\n"
                },
                {
                    "date": 1692211063248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,19 @@\n     text: 'Initial message',\n     timestamp: new Date('2023-08-09 11:00:00'),\n   };\n \n+//When using changeDetection: ChangeDetectionStrategy.OnPush, the component will only be \n+// updated when the input reference changes. You can not update the input object and expect \n+// the component to be updated. You need to create a new object and assign it to the input\n+// property. This is because the OnPush strategy will only check for reference changes, not\n+// property changes.\n+\n+  // updateMessage() {\n+  //   this.message.text = 'Updated message';\n+  //   this.message.timestamp = new Date();\n+  // }\n+\n   updateMessage() {\n     this.message = {\n       text: 'Updated message',\n       timestamp: new Date(),\n"
                },
                {
                    "date": 1692211075747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,31 @@\n+import { Component } from '@angular/core';\n+\n+@Component({\n+  selector: 'app-change-detection-dashboard',\n+  templateUrl: './change-detection-dashboard.component.html',\n+  styleUrls: ['./change-detection-dashboard.component.scss']\n+})\n+export class ChangeDetectionDashboardComponent {\n+  message = {\n+    text: 'Initial message',\n+    timestamp: new Date('2023-08-09 11:00:00'),\n+  };\n+\n+  //When using changeDetection: ChangeDetectionStrategy.OnPush, the component will only be \n+  // updated when the input reference changes. You can not update the input object and expect \n+  // the component to be updated. You need to create a new object and assign it to the input\n+  // property. This is because the OnPush strategy will only check for reference changes, not\n+  // property changes.\n+\n+  // updateMessage() {\n+  //   this.message.text = 'Updated message';\n+  //   this.message.timestamp = new Date();\n+  // }\n+\n+  updateMessage() {\n+    this.message = {\n+      text: 'Updated message',\n+      timestamp: new Date(),\n+    };\n+  }\n+}\n"
                },
                {
                    "date": 1692211196608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n   // }\n \n   updateMessage() {\n     this.message = {\n+      //...this.message, use the ... operator to copy the properties of the old object\n       text: 'Updated message',\n       timestamp: new Date(),\n     };\n   }\n"
                },
                {
                    "date": 1692212316891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     text: 'Initial message',\n     timestamp: new Date('2023-08-09 11:00:00'),\n   };\n \n-  //When using changeDetection: ChangeDetectionStrategy.OnPush, the component will only be \n+  // When using changeDetection: ChangeDetectionStrategy.OnPush, the component will only be \n   // updated when the input reference changes. You can not update the input object and expect \n   // the component to be updated. You need to create a new object and assign it to the input\n   // property. This is because the OnPush strategy will only check for reference changes, not\n   // property changes.\n@@ -29,35 +29,4 @@\n       timestamp: new Date(),\n     };\n   }\n }\n-import { Component } from '@angular/core';\n-\n-@Component({\n-  selector: 'app-change-detection-dashboard',\n-  templateUrl: './change-detection-dashboard.component.html',\n-  styleUrls: ['./change-detection-dashboard.component.scss']\n-})\n-export class ChangeDetectionDashboardComponent {\n-  message = {\n-    text: 'Initial message',\n-    timestamp: new Date('2023-08-09 11:00:00'),\n-  };\n-\n-//When using changeDetection: ChangeDetectionStrategy.OnPush, the component will only be \n-// updated when the input reference changes. You can not update the input object and expect \n-// the component to be updated. You need to create a new object and assign it to the input\n-// property. This is because the OnPush strategy will only check for reference changes, not\n-// property changes.\n-\n-  // updateMessage() {\n-  //   this.message.text = 'Updated message';\n-  //   this.message.timestamp = new Date();\n-  // }\n-\n-  updateMessage() {\n-    this.message = {\n-      text: 'Updated message',\n-      timestamp: new Date(),\n-    };\n-  }\n-}\n"
                }
            ],
            "date": 1692210161120,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-change-detection-dashboard',\n  templateUrl: './change-detection-dashboard.component.html',\n  styleUrls: ['./change-detection-dashboard.component.scss']\n})\nexport class ChangeDetectionDashboardComponent {\n  message = {\n    text: 'Initial message',\n    timestamp: new Date('2023-08-09 11:00:00'),\n  };\n\n  updateMessage() {\n    this.message.text = 'Updated message';\n    this.message.timestamp = new Date();\n  }\n}\n"
        }
    ]
}