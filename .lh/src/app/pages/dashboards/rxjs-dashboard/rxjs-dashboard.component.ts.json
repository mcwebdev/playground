{
    "sourceFile": "src/app/pages/dashboards/rxjs-dashboard/rxjs-dashboard.component.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1692725924170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692725982331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,22 +6,39 @@\n   styleUrls: ['./rxjs-dashboard.component.scss']\n })\n export class RxjsDashboardComponent {\n   code: any;\n+  code1: any;\n+  code2: any;\n+  code3: any;\n   constructor() {\n     this.code = `\n-import { of } from 'rxjs';\n-import { mergeMap, delay } from 'rxjs/operators';\n+        import { of } from 'rxjs';\n+        import { mergeMap, delay } from 'rxjs/operators';\n \n+        of(1, 2, 3)\n+          .pipe(\n+            mergeMap(value => of(value).pipe(delay(1000)))\n+          )\n+          .subscribe(x => console.log(x));\n+          \n+        // Output will be:\n+        // 1\n+        // 2\n+        // 3\n+    `;\n+\n+    this.code1 = `\n+        import { of } from 'rxjs';\n+import { switchMap, delay } from 'rxjs/operators';\n+\n of(1, 2, 3)\n   .pipe(\n-    mergeMap(value => of(value).pipe(delay(1000)))\n+    switchMap(value => of(value).pipe(delay(1000)))\n   )\n   .subscribe(x => console.log(x));\n-  \n+\n // Output will be:\n-// 1\n-// 2\n // 3\n \n     `;\n   }\n"
                },
                {
                    "date": 1692725995984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,18 +28,17 @@\n     `;\n \n     this.code1 = `\n         import { of } from 'rxjs';\n-import { switchMap, delay } from 'rxjs/operators';\n+        import { switchMap, delay } from 'rxjs/operators';\n \n-of(1, 2, 3)\n-  .pipe(\n-    switchMap(value => of(value).pipe(delay(1000)))\n-  )\n-  .subscribe(x => console.log(x));\n+        of(1, 2, 3)\n+          .pipe(\n+            switchMap(value => of(value).pipe(delay(1000)))\n+          )\n+          .subscribe(x => console.log(x));\n \n-// Output will be:\n-// 3\n-\n+        // Output will be:\n+        // 3\n     `;\n   }\n }\n"
                },
                {
                    "date": 1692726634940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,6 +39,50 @@\n \n         // Output will be:\n         // 3\n     `;\n+\n+    this.code2 = `\n+    // Imagine a situation where a user is typing into a search box, and for each key press, \n+    // a search request is sent to the server. Using mergeMap: With mergeMap, all search \n+    // requests will be made concurrently, and all results will be processed, potentially \n+    // leading to outdated results being displayed. \n+\n+      import { fromEvent } from 'rxjs';\n+      import { mergeMap, map } from 'rxjs/operators';\n+\n+      const searchBox = document.getElementById('search-box');\n+\n+      fromEvent(searchBox, 'input')\n+        .pipe(\n+          mergeMap((event: any) => {\n+            const searchTerm = event.target.value;\n+            return fetch('/ search ? query = \\${ searchTerm }').then(res => res.json());\n+          })\n+        )\n+        .subscribe(results => {\n+          // Handle and display the results\n+        });\n+    `;\n+\n+    this.code2 = `\n+    // With switchMap, only the result of the latest search request will be processed, \n+    // and any previous requests will be canceled.\n+\n+      import { fromEvent } from 'rxjs';\n+      import { switchMap, map } from 'rxjs/operators';\n+\n+      const searchBox = document.getElementById('search-box');\n+\n+      fromEvent(searchBox, 'input')\n+        .pipe(\n+          switchMap((event: any) => {\n+            const searchTerm = event.target.value;\n+            return fetch('/ search ? query = \\${ searchTerm }').then(res => res.json());\n+          })\n+        )\n+        .subscribe(results => {\n+          // Handle and display the latest results\n+        });\n+    `;\n   }\n }\n"
                },
                {
                    "date": 1692726641598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n           // Handle and display the results\n         });\n     `;\n \n-    this.code2 = `\n+    this.code3 = `\n     // With switchMap, only the result of the latest search request will be processed, \n     // and any previous requests will be canceled.\n \n       import { fromEvent } from 'rxjs';\n"
                },
                {
                    "date": 1692727156542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n   code: any;\n   code1: any;\n   code2: any;\n   code3: any;\n+  code34: any;\n   constructor() {\n     this.code = `\n         import { of } from 'rxjs';\n         import { mergeMap, delay } from 'rxjs/operators';\n@@ -83,6 +84,8 @@\n         .subscribe(results => {\n           // Handle and display the latest results\n         });\n     `;\n+\n+    this.code4 = ``\n   }\n }\n"
                },
                {
                    "date": 1692727169213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   code: any;\n   code1: any;\n   code2: any;\n   code3: any;\n-  code34: any;\n+  code4: any;\n   constructor() {\n     this.code = `\n         import { of } from 'rxjs';\n         import { mergeMap, delay } from 'rxjs/operators';\n@@ -85,7 +85,9 @@\n           // Handle and display the latest results\n         });\n     `;\n \n-    this.code4 = ``\n+    this.code4 = `\n+    \n+    `\n   }\n }\n"
                },
                {
                    "date": 1692727423163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,41 @@\n         });\n     `;\n \n     this.code4 = `\n-    \n+    import { of } from 'rxjs';\n+    import { mergeMap } from 'rxjs/operators';\n+\n+    // Simulated user ID\n+    const userId = '123';\n+\n+    // Fetch user's basic information\n+    const user$ = of(userId).pipe(\n+      mergeMap(id => fetch('/ users / \\${ id } ').then(res => res.json()))\n+    );\n+\n+    // Fetch user's posts\n+    const posts$ = user$.pipe(\n+      mergeMap(user => fetch('/ posts ? userId = \\${ user.id } ').then(res => res.json()))\n+    );\n+\n+    // Fetch user's friends\n+    const friends$ = user$.pipe(\n+      mergeMap(user => fetch('/ friends ? userId = \\${ user.id }').then(res => res.json()))\n+    );\n+\n+    // Subscribe to all observables\n+    user$.subscribe(user => {\n+      // Handle user data\n+    });\n+\n+    posts$.subscribe(posts => {\n+      // Handle posts data\n+    });\n+\n+    friends$.subscribe(friends => {\n+      // Handle friends data\n+    });\n+\n     `\n   }\n }\n"
                },
                {
                    "date": 1692727796190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,13 @@\n   code1: any;\n   code2: any;\n   code3: any;\n   code4: any;\n+  code5: any;\n+  code6: any;\n+  code7: any;\n+  code8: any;\n+  code9: any;\n   constructor() {\n     this.code = `\n         import { of } from 'rxjs';\n         import { mergeMap, delay } from 'rxjs/operators';\n@@ -120,7 +125,83 @@\n     friends$.subscribe(friends => {\n       // Handle friends data\n     });\n \n-    `\n+    `;\n+\n+    this.code5 = ` \n+    import { fromEvent } from 'rxjs';\n+    import { debounceTime, switchMap } from 'rxjs/operators';\n+\n+    // Listen to input events from a search box\n+    const searchBox = document.getElementById('search-box');\n+    fromEvent(searchBox, 'input')\n+      .pipe(\n+        debounceTime(300), // Wait for the user to stop typing for 300ms\n+        switchMap(event => fetch('/ search ? query = \\${ event.target.value }')) // Make search request\n+      )\n+      .subscribe(results => {\n+        // Display the search results\n+      });\n+\n+    `;\n+\n+    this.code6 = ` \n+    import { forkJoin } from 'rxjs';\n+\n+    // Fetch user data and orders concurrently\n+    const user$ = fetch('/user/1').then(res => res.json());\n+    const orders$ = fetch('/orders?userId=1').then(res => res.json());\n+\n+    forkJoin([user$, orders$]) // Combine the observables\n+      .subscribe(([user, orders]) => {\n+        // Handle both user and orders data\n+      });\n+\n+    `;\n+\n+    this.code7 = ` \n+    // Define action to increment a counter\n+    const increment = createAction('INCREMENT');\n+\n+    // Define reducer to handle the action\n+    const counterReducer = createReducer(\n+      0, // Initial state\n+      on(increment, state => state + 1) // Increment the state\n+    );\n+\n+    // Dispatch the increment action\n+    store.dispatch(increment());\n+\n+    `;\n+\n+    this.code8 = ` \n+    import { webSocket } from 'rxjs/webSocket';\n+\n+    const subject = webSocket('ws://example.com');\n+\n+    subject.subscribe(\n+      msg => console.log('Received:', msg), // Handle received messages\n+      err => console.error(err), // Handle errors\n+      () => console.log('Complete') // Handle completion\n+    );\n+\n+    subject.next({ message: 'Hello' }); // Send a message to the server\n+\n+    `;\n+\n+    this.code9 = ` \n+    import { interval } from 'rxjs';\n+    import { take } from 'rxjs/operators';\n+\n+    const progressElement = document.getElementById('progress-bar');\n+\n+    // Emit values every 50ms for 2 seconds\n+    interval(50).pipe(take(40))\n+      .subscribe(step => {\n+        // Update the progress bar by 2.5% each step\n+        progressElement.style.width = '\\${ 2.5 * step }%';\n+      });\n+\n+    `;\n   }\n }\n"
                },
                {
                    "date": 1692730297210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,20 +159,28 @@\n \n     `;\n \n     this.code7 = ` \n-    // Define action to increment a counter\n-    const increment = createAction('INCREMENT');\n+    import { Subject } from 'rxjs';\n+import { scan, startWith } from 'rxjs/operators';\n \n-    // Define reducer to handle the action\n-    const counterReducer = createReducer(\n-      0, // Initial state\n-      on(increment, state => state + 1) // Increment the state\n-    );\n+// Define a subject to dispatch actions\n+const actions$ = new Subject<number>();\n \n-    // Dispatch the increment action\n-    store.dispatch(increment());\n+// Define an observable to manage the state\n+const counter$ = actions$.pipe(\n+  startWith(0), // Start with an initial value of 0\n+  scan((state, change) => state + change) // Accumulate the changes to calculate the current state\n+);\n \n+// Subscribe to the observable to handle the current state\n+counter$.subscribe(state => console.log('Counter value: \\${ state }'));\n+\n+// Dispatch actions to change the state\n+actions$.next(1); // Increment by 1\n+actions$.next(-1); // Decrement by 1\n+\n+\n     `;\n \n     this.code8 = ` \n     import { webSocket } from 'rxjs/webSocket';\n"
                },
                {
                    "date": 1692730320787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,27 +160,25 @@\n     `;\n \n     this.code7 = ` \n     import { Subject } from 'rxjs';\n-import { scan, startWith } from 'rxjs/operators';\n+    import { scan, startWith } from 'rxjs/operators';\n \n-// Define a subject to dispatch actions\n-const actions$ = new Subject<number>();\n+    // Define a subject to dispatch actions\n+    const actions$ = new Subject<number>();\n \n-// Define an observable to manage the state\n-const counter$ = actions$.pipe(\n-  startWith(0), // Start with an initial value of 0\n-  scan((state, change) => state + change) // Accumulate the changes to calculate the current state\n-);\n+    // Define an observable to manage the state\n+    const counter$ = actions$.pipe(\n+      startWith(0), // Start with an initial value of 0\n+      scan((state, change) => state + change) // Accumulate the changes to calculate the current state\n+    );\n \n-// Subscribe to the observable to handle the current state\n-counter$.subscribe(state => console.log('Counter value: \\${ state }'));\n+    // Subscribe to the observable to handle the current state\n+    counter$.subscribe(state => console.log('Counter value: \\${ state }'));\n \n-// Dispatch actions to change the state\n-actions$.next(1); // Increment by 1\n-actions$.next(-1); // Decrement by 1\n-\n-\n+    // Dispatch actions to change the state\n+    actions$.next(1); // Increment by 1\n+    actions$.next(-1); // Decrement by 1\n     `;\n \n     this.code8 = ` \n     import { webSocket } from 'rxjs/webSocket';\n"
                },
                {
                    "date": 1692730703837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,8 +159,12 @@\n \n     `;\n \n     this.code7 = ` \n+    //Here, we're using a Subject to dispatch actions, and the scan operator accumulates the changes\n+    // to manage the state of a counter. This code snippet illustrates how you can use RxJS to manage \n+    // state without relying on NgRx or other state management libraries.\n+    \n     import { Subject } from 'rxjs';\n     import { scan, startWith } from 'rxjs/operators';\n \n     // Define a subject to dispatch actions\n"
                },
                {
                    "date": 1692895615797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,24 @@\n import { Component } from '@angular/core';\n-\n+import * as data from '../../../shared/models/data';\n @Component({\n   selector: 'app-rxjs-dashboard',\n   templateUrl: './rxjs-dashboard.component.html',\n   styleUrls: ['./rxjs-dashboard.component.scss']\n })\n export class RxjsDashboardComponent {\n-  code: any;\n-  code1: any;\n-  code2: any;\n-  code3: any;\n-  code4: any;\n-  code5: any;\n-  code6: any;\n-  code7: any;\n-  code8: any;\n-  code9: any;\n+\n+  code: string;\n+  code1: string;\n+  code2: string;\n+  code3: string;\n+  code4: string;\n+  code5: string;\n+  code6: string;\n+  code7: string;\n+  code8: string;\n+  code9: string;\n+\n   constructor() {\n     this.code = `\n         import { of } from 'rxjs';\n         import { mergeMap, delay } from 'rxjs/operators';\n"
                },
                {
                    "date": 1692896195570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n import { Component } from '@angular/core';\n-import * as data from '../../../shared/models/data';\n @Component({\n   selector: 'app-rxjs-dashboard',\n   templateUrl: './rxjs-dashboard.component.html',\n   styleUrls: ['./rxjs-dashboard.component.scss']\n"
                },
                {
                    "date": 1693248031546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n import { Component } from '@angular/core';\n+import { Observable, combineLatest, asyncScheduler, queueScheduler, asapScheduler, observeOn, subscribeOn } from 'rxjs';\n+\n @Component({\n   selector: 'app-rxjs-dashboard',\n   templateUrl: './rxjs-dashboard.component.html',\n   styleUrls: ['./rxjs-dashboard.component.scss']\n@@ -15,9 +17,9 @@\n   code6: string;\n   code7: string;\n   code8: string;\n   code9: string;\n-\n+  outputMessage: string[] = [];\n   constructor() {\n     this.code = `\n         import { of } from 'rxjs';\n         import { mergeMap, delay } from 'rxjs/operators';\n@@ -214,5 +216,61 @@\n       });\n \n     `;\n   }\n+\n+  // Function to start the observable sequence\n+  startObservables() {\n+    this.outputMessage = []; // Reset the output message\n+\n+    const observable1 = new Observable((observer) => {\n+      this.outputMessage.push('Starting observable1');\n+\n+      asyncScheduler.schedule(() => {\n+        this.outputMessage.push('observable1: Emitting 1');\n+        observer.next(1);\n+      }, 1000);\n+\n+      asyncScheduler.schedule(() => {\n+        this.outputMessage.push('observable1: Emitting 2');\n+        observer.next(2);\n+      }, 2000);\n+\n+      asyncScheduler.schedule(() => {\n+        this.outputMessage.push('observable1: Emitting 3');\n+        observer.next(3);\n+        observer.complete();\n+      }, 3000);\n+    });\n+\n+    const observable2 = new Observable((observer) => {\n+      this.outputMessage.push('Starting observable2');\n+\n+      observer.next('A');\n+      observer.next('B');\n+      observer.next('C');\n+      observer.complete();\n+    }).pipe(\n+      observeOn(queueScheduler)\n+    );\n+\n+    const combinedObservable = combineLatest([observable1, observable2]).pipe(\n+      observeOn(asapScheduler)\n+    );\n+\n+    this.outputMessage.push('Just before subscribing to combinedObservable');\n+    combinedObservable.pipe(\n+      subscribeOn(asapScheduler)\n+    ).subscribe({\n+      next: (value) => {\n+        this.outputMessage.push(`Received value: ${JSON.stringify(value)}`);\n+      },\n+      error: (err) => {\n+        this.outputMessage.push(`An error occurred: ${err}`);\n+      },\n+      complete: () => {\n+        this.outputMessage.push('All done!');\n+      }\n+    });\n+    this.outputMessage.push('Just after subscribing to combinedObservable');\n+  }\n }\n"
                },
                {
                    "date": 1693248178499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,12 @@\n   code7: string;\n   code8: string;\n   code9: string;\n   outputMessage: string[] = [];\n+  scheduler: string;\n   constructor() {\n+this.scheduler = ``\n+\n     this.code = `\n         import { of } from 'rxjs';\n         import { mergeMap, delay } from 'rxjs/operators';\n \n"
                },
                {
                    "date": 1693248222278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,66 @@\n   code9: string;\n   outputMessage: string[] = [];\n   scheduler: string;\n   constructor() {\n-    this.scheduler = ``\n+    this.scheduler = ` outputMessage: string[] = [];\n \n+  // Function to start the observable sequence\n+  startObservables() {\n+    this.outputMessage = []; // Reset the output message\n+    \n+    const observable1 = new Observable((observer) => {\n+      this.outputMessage.push('Starting observable1');\n+      \n+      asyncScheduler.schedule(() => {\n+        this.outputMessage.push('observable1: Emitting 1');\n+        observer.next(1);\n+      }, 1000);\n+\n+      asyncScheduler.schedule(() => {\n+        this.outputMessage.push('observable1: Emitting 2');\n+        observer.next(2);\n+      }, 2000);\n+\n+      asyncScheduler.schedule(() => {\n+        this.outputMessage.push('observable1: Emitting 3');\n+        observer.next(3);\n+        observer.complete();\n+      }, 3000);\n+    });\n+\n+    const observable2 = new Observable((observer) => {\n+      this.outputMessage.push('Starting observable2');\n+      \n+      observer.next('A');\n+      observer.next('B');\n+      observer.next('C');\n+      observer.complete();\n+    }).pipe(\n+      observeOn(queueScheduler)\n+    );\n+\n+    const combinedObservable = combineLatest([observable1, observable2]).pipe(\n+      observeOn(asapScheduler)\n+    );\n+\n+    this.outputMessage.push('Just before subscribing to combinedObservable');\n+    combinedObservable.pipe(\n+      subscribeOn(asapScheduler)\n+    ).subscribe({\n+      next: (value) => {\n+        this.outputMessage.push('Received value: \\${ JSON.stringify(value) } ');\n+      },\n+      error: (err) => {\n+        this.outputMessage.push('An error occurred: \\${ err }');\n+      },\n+      complete: () => {\n+        this.outputMessage.push('All done!');\n+      }\n+    });\n+    this.outputMessage.push('Just after subscribing to combinedObservable');\n+  }`\n+\n     this.code = `\n         import { of } from 'rxjs';\n         import { mergeMap, delay } from 'rxjs/operators';\n \n"
                },
                {
                    "date": 1693249336456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,61 +22,81 @@\n   scheduler: string;\n   constructor() {\n     this.scheduler = ` outputMessage: string[] = [];\n \n-  // Function to start the observable sequence\n   startObservables() {\n-    this.outputMessage = []; // Reset the output message\n+    // Clear previous output messages from the UI\n+    this.outputMessage = [];\n     \n+    // Create the first observable using asyncScheduler to emit values 1, 2, 3 with delays\n     const observable1 = new Observable((observer) => {\n+      // Log the start of observable1\n       this.outputMessage.push('Starting observable1');\n-      \n+\n+      // Schedule the emission of value 1 after 1 second\n       asyncScheduler.schedule(() => {\n         this.outputMessage.push('observable1: Emitting 1');\n-        observer.next(1);\n+        observer.next(1); // Emit the value 1\n       }, 1000);\n \n+      // Schedule the emission of value 2 after 2 seconds\n       asyncScheduler.schedule(() => {\n         this.outputMessage.push('observable1: Emitting 2');\n-        observer.next(2);\n+        observer.next(2); // Emit the value 2\n       }, 2000);\n \n+      // Schedule the emission of value 3 after 3 seconds and complete the observable\n       asyncScheduler.schedule(() => {\n         this.outputMessage.push('observable1: Emitting 3');\n-        observer.next(3);\n-        observer.complete();\n+        observer.next(3); // Emit the value 3\n+        observer.complete(); // Complete the observable\n       }, 3000);\n     });\n \n+    // Create the second observable which emits values 'A', 'B', 'C' synchronously\n+    // but uses observeOn with queueScheduler to control the delivery context\n     const observable2 = new Observable((observer) => {\n+      // Log the start of observable2\n       this.outputMessage.push('Starting observable2');\n       \n       observer.next('A');\n       observer.next('B');\n       observer.next('C');\n       observer.complete();\n     }).pipe(\n+      // Use queueScheduler to control the execution context of this observable\n       observeOn(queueScheduler)\n     );\n \n+    // Combine observable1 and observable2 using combineLatest\n+    // and specify asapScheduler for notification delivery\n     const combinedObservable = combineLatest([observable1, observable2]).pipe(\n       observeOn(asapScheduler)\n     );\n \n+    // Log the moment just before subscription\n     this.outputMessage.push('Just before subscribing to combinedObservable');\n+\n+    // Subscribe to the combined observable\n     combinedObservable.pipe(\n+      // Use asapScheduler for the subscription itself\n       subscribeOn(asapScheduler)\n     ).subscribe({\n+      // Log received values\n       next: (value) => {\n         this.outputMessage.push('Received value: \\${ JSON.stringify(value) } ');\n       },\n+      // Log any errors\n       error: (err) => {\n         this.outputMessage.push('An error occurred: \\${ err }');\n       },\n+      // Log when the combined observable sequence is complete\n       complete: () => {\n         this.outputMessage.push('All done!');\n       }\n     });\n+\n+    // Log the moment just after subscription\n     this.outputMessage.push('Just after subscribing to combinedObservable');\n   }`\n \n     this.code = `\n"
                }
            ],
            "date": 1692725924170,
            "name": "Commit-0",
            "content": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-rxjs-dashboard',\n  templateUrl: './rxjs-dashboard.component.html',\n  styleUrls: ['./rxjs-dashboard.component.scss']\n})\nexport class RxjsDashboardComponent {\n  code: any;\n  constructor() {\n    this.code = `\nimport { of } from 'rxjs';\nimport { mergeMap, delay } from 'rxjs/operators';\n\nof(1, 2, 3)\n  .pipe(\n    mergeMap(value => of(value).pipe(delay(1000)))\n  )\n  .subscribe(x => console.log(x));\n  \n// Output will be:\n// 1\n// 2\n// 3\n\n    `;\n  }\n}\n"
        }
    ]
}